#include <GL/glut.h>
#include <vector>

// 存储点的结构体
struct Point {
    float x, y;
};

// 存储所有点击的点
std::vector<Point> points;

// 初始化函数
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // 设置背景为白色
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0.0, 800.0, 600.0, 0.0); // 设置视口大小为800x600
}

// 显示回调函数
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // 绘制所有存储的点
    glColor3f(1.0, 0.0, 0.0); // 设置颜色为红色
    glPointSize(3.0); // 设置点大小为3像素

    glBegin(GL_POINTS);
    for (const auto& point : points) {
        glVertex2f(point.x, point.y);
    }
    glEnd();

    glFlush();
}

// 鼠标回调函数
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        // 添加新点到向量中
        points.push_back({ static_cast<float>(x), static_cast<float>(y) });

        // 重绘场景
        glutPostRedisplay();
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("鼠标点击绘制红点");

    init();

    glutDisplayFunc(display);
    glutMouseFunc(mouse);

    glutMainLoop();

    return 0;
}
