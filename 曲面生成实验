#include <GL/glut.h>
#include <cmath>

// 曲面参数
const int GRID_SIZE = 50;
const float SCALE = 0.1f;

// 添加贝塞尔曲面控制点
float controlPoints[4][4][3] = {
    {{-1.5, -1.5, 0.0}, {-0.5, -1.5, 2.0}, {0.5, -1.5, -1.0}, {1.5, -1.5, 0.0}},
    {{-1.5, -0.5, 2.0}, {-0.5, -0.5, 3.0}, {0.5, -0.5, 0.0},  {1.5, -0.5, -1.0}},
    {{-1.5, 0.5, -1.0}, {-0.5, 0.5, 0.0},  {0.5, 0.5, 3.0},   {1.5, 0.5, 2.0}},
    {{-1.5, 1.5, 0.0},  {-0.5, 1.5, -1.0}, {0.5, 1.5, 2.0},   {1.5, 1.5, 0.0}}
};

// 贝塞尔基函数
float bezierBasis(int i, float t) {
    switch (i) {
    case 0: return (1 - t) * (1 - t) * (1 - t);
    case 1: return 3 * t * (1 - t) * (1 - t);
    case 2: return 3 * t * t * (1 - t);
    case 3: return t * t * t;
    }
    return 0.0f;
}

void init() {
    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
    glEnable(GL_DEPTH_TEST);

    // 设置光照
    GLfloat light_position[] = { 3.0, 3.0, 3.0, 1.0 };
    GLfloat light_diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat light_ambient[] = { 0.2, 0.2, 0.2, 1.0 };

    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);

    // 设置材质
    GLfloat mat_diffuse[] = { 0.7, 0.7, 0.7, 1.0 };
    GLfloat mat_specular[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_shininess[] = { 50.0 };

    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);

    // 启用颜色材质
    glEnable(GL_COLOR_MATERIAL);
    glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
}


void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(3, 3, 3, 0, 0, 0, 0, 1, 0);

    const int divisions = 20;
    glColor3f(0.4f, 0.6f, 0.8f);

    glBegin(GL_QUADS);
    for (int i = 0; i < divisions; ++i) {
        float u = i / (float)divisions;
        float u1 = (i + 1) / (float)divisions;

        for (int j = 0; j < divisions; ++j) {
            float v = j / (float)divisions;
            float v1 = (j + 1) / (float)divisions;

            // 计算四个角点
            float p0[3] = { 0 }, p1[3] = { 0 }, p2[3] = { 0 }, p3[3] = { 0 };

            for (int k = 0; k < 4; ++k) {
                for (int l = 0; l < 4; ++l) {
                    float bu = bezierBasis(k, u);
                    float bv = bezierBasis(l, v);
                    float bu1 = bezierBasis(k, u1);
                    float bv1 = bezierBasis(l, v1);

                    for (int m = 0; m < 3; ++m) {
                        p0[m] += controlPoints[k][l][m] * bu * bv;
                        p1[m] += controlPoints[k][l][m] * bu * bv1;
                        p2[m] += controlPoints[k][l][m] * bu1 * bv1;
                        p3[m] += controlPoints[k][l][m] * bu1 * bv;
                    }
                }
            }

            // 计算法向量
            float edge1[3] = { p1[0] - p0[0], p1[1] - p0[1], p1[2] - p0[2] };
            float edge2[3] = { p3[0] - p0[0], p3[1] - p0[1], p3[2] - p0[2] };
            float normal[3] = {
                edge1[1] * edge2[2] - edge1[2] * edge2[1],
                edge1[2] * edge2[0] - edge1[0] * edge2[2],
                edge1[0] * edge2[1] - edge1[1] * edge2[0]
            };
            float len = sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);
            normal[0] /= len; normal[1] /= len; normal[2] /= len;

            glNormal3fv(normal);
            glVertex3fv(p0);
            glVertex3fv(p1);
            glVertex3fv(p2);
            glVertex3fv(p3);
        }
    }
    glEnd();

    glutSwapBuffers();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (double)w / (double)h, 1.0, 100.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("贝塞尔曲面");

    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    glutMainLoop();
    return 0;
}
